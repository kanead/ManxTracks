deviance(m1) / df.residual(m1)
head(Fish)
Fish$fPeriod <- factor(Fish$Period)
m2 <- glm(TotAbund~ MeanDepth * fPeriod, data= Fish, family = poisson)
summary(m2)
Fish$LogSA <- log(Fish$SweptArea)
m3 <- glm(TotAbund~ MeanDepth * fPeriod +offset(LogSA), data= Fish, family = poisson)
summary(m3)
require(MASS)
m4 <- glm.nb(TotAbund~ MeanDepth * fPeriod + offset(LogSA), data= Fish)
summary(m4)
deviance(m4) / df.residual(m4)
drop1(m4,test="Chi")
require(MASS)
m5 <- glm.nb(TotAbund~ MeanDepth + fPeriod + offset(LogSA), data= Fish)
summary(m5)
#Model validation
E1 <- resid(m5, type = "pearson")
F1 <- fitted(m5)
eta <- predict(m5, type = "link")
par(mfrow = c(2,2), mar = c(5,5,2,2))
plot(x = F1,
y = E1,
xlab = "Fitted values",
ylab = "Pearson residuals",
cex.lab = 1.5)
abline(h = 0, v = 0, lty = 2)
plot(x = c(1:146),
y = cooks.distance(m5),
xlab = "index",
ylab = "cooks distance",
ylim=c(0:1),
cex.lab = 1.5)
plot(x = Fish$MeanDepth,
y = E1,
xlab = "Mean Depth (km)",
ylab = "Pearson residuals",
cex.lab = 1.5,
pch = 16)
abline(h=0, v = 0, lty = 2)
boxplot(E1 ~ Period,
ylab = "Pearson residuals",
data = Fish,
cex.lab = 1.5,
xlab = "Period")
abline(h = 0, v = 0, lty = 2)
mydata1<-data.frame(
MeanDepth=seq(from=0.804,to=4.865,
length=25),
fPeriod ="1",
LogSA = log(mean(Fish$SweptArea)))
mydata2<-data.frame(
MeanDepth=seq(from=0.804,to=4.865,
length=25),
fPeriod ="2",
LogSA = log(mean(Fish$SweptArea)))
P1 <- predict(m5,newdata=mydata1,type = "response")
P2 <- predict(m5,newdata=mydata2,type = "response")
plot(Fish$MeanDepth,Fish$TotAbund,
xlab = "mean depth (km)",
ylab = "total abundance values")
lines(mydata1$MeanDepth,P1,lwd=3,col="red")
lines(mydata2$MeanDepth,P2,lwd=3)
legend(4,1000, legend=c("Period 1", "Period 2"),
col=c("red", "black"), lty=1, cex=0.8)
Bees <- read.table("C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\WBees.txt",header=T)
head(Bees)
par(mfrow = c(1,2))
#Plot the data and add a linear regression line
#Figure 1.17
plot(x = Bees$CellSize,
y = Bees$Parasites,
xlab = "Cell size",
ylab = "Absence or presence of parasites")
M0 <- lm(Parasites ~ CellSize,
data = Bees)
abline(M0, lwd = 3)
#Boxplot of cell size conditional on absence/presence of parasites
boxplot(CellSize ~ Parasites,
data = Bees)
require(ggplot2)
log_odds = seq(from = -5, to = 5, by = 0.25)
odds = exp(log_odds)
# use 'plogis' function to calculate exp(x)/(1 + exp(x))
p = plogis(log_odds)
# use odds/(1+odds) to calculate p a different way
p2 = odds/(1 + odds)
# store probability of failure (1-p)
q = 1 - p
# store log_odds and y in data frame for use with ggplot
d = data.frame(log_odds, odds, p, p2, q)
ggplot(d, aes(x = log_odds, y = p)) +
geom_line() +
geom_hline(aes(yintercept = 0.5),
colour = "gray",
linetype = "dashed") +
geom_vline(aes(xintercept = 0.0),
colour = "gray",
linetype = "dashed") +
scale_x_continuous(breaks = seq(-5, 5, by = 1)) +
labs(title = "probability versus log-odds")
B1<-glm(Parasites~CellSize, family = binomial,data=Bees)
summary(B1)
# odds scale
-11.245+22.175*0.5
# probability scale
exp(-11.245+22.175*0.5) / (1 + exp (-11.245+22.175*0.5))
mydata<-data.frame(CellSize=seq(0.35,0.69,length=50))
pred <- predict(B1,newdata=mydata,type="response")
plot(x=Bees$CellSize,y=Bees$Parasites,xlab="cell size", ylab="probability of parasites")
lines(mydata$CellSize,pred)
knitr::opts_knit$set(root.dir = "C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\)
knitr::opts_knit$set(root.dir = "C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img")
rich <- read.table("C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\rich.txt",header = T)
head(rich,5)
knitr::opts_knit$set(root.dir = "C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img")
knitr::opts_knit$set(root.dir = "C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img")
rich <- read.table("C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\rich.txt",header = T)
head(rich,5)
plot(rich)
model1<-lm(Richness ~ NAP+grainsize+humus+factor(week) + angle2,
data = rich)
summary(model1)
max.model <- lm(Richness~NAP+grainsize+humus+factor(week) + angle2,data=rich)
step(max.model, direction = "backward")
min.model = lm(Richness ~ 1, data=rich)
max.model <- formula(lm(Richness~NAP+grainsize+humus+factor(week) + angle2,data=rich))
step(min.model, direction = "forward",max.model)
min.model = lm(Richness ~ 1, data=rich)
max.model <- formula(lm(Richness~NAP+grainsize+humus+factor(week) + angle2,data=rich))
step(min.model, direction = "both",max.model)
intercepts <- c(coef(model1)["(Intercept)"],
coef(model1)["(Intercept)"] + coef(model1)["factor(week)2"],
coef(model1)["(Intercept)"] + coef(model1)["factor(week)3"],
coef(model1)["(Intercept)"] + coef(model1)["factor(week)4"])
lines.df <- data.frame(intercepts = intercepts,
slopes = rep(coef(model1)["NAP"], 4),
week = levels(factor(rich$week)))
qplot(x = NAP, y = Richness, color = factor(week), data = rich) +
geom_abline(aes(intercept = intercepts,
slope = slopes,
color = week), data = lines.df)
set.seed(1)
N <- 200000
y <- rnorm(N)
x1 <- y + rnorm(N)
x2 <- y + rnorm(N)
x3 <- y + rnorm(N)
x4 <- rnorm(N)
x5 <- rnorm(N)
x6 <- x1 + x2 + x3 + rnorm(N)
data <- data.frame(y, x1, x2, x3, x4, x5, x6)
fit1 <- lm(y ~ ., data)
fit2 <- lm(y ~ 1, data)
back<-step(fit1,direction="backward")
forward<-step(fit2,direction="forward",scope=list(upper=fit1,lower=fit2))
both<-step(fit2,direction="both",scope=list(upper=fit1,lower=fit2))
library(car)
vif(fit1)
vifTest<-lm(x6~x1+x2+x3+x4+x5,data=data)
summary(vifTest)$r.squared
1/(1-0.923213)
food<-read.csv("C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\Interactions_Categorical.csv")
intCat<-lm(Enjoyment~Food*Condiment,data=food)
interaction.plot(x.factor = food$Food,
trace.factor = food$Condiment,
response = food$Enjoyment,ylab="enjoyment")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p<-qplot(food$Food,food$Enjoyment,data=food,geom='boxplot')
p<-p+stat_summary(fun.y=mean,shape=1,col='red',geom='point')
q<-qplot(food$Condiment,food$Enjoyment,data=food,geom='boxplot')
q<-q+stat_summary(fun.y=mean,shape=1,col='red',geom='point')
multiplot(p, q, cols=2)
set.seed(1)
x1 <- runif(100, 0, 1)
x2 <- sample(1:10, 100, TRUE)/10
y <- 1 + 2 * x1 + 3 * x2 - 10 * x1 * x2 + rnorm(100)
m.int <- lm(y ~ x1 * x2);summary(m.int)
library(rsm)
persp(m.int, x1 ~ x2, zlab = "y",col = rainbow(50), contours = "colors",
theta = 120, phi = 15,ticktype="simple")
set.seed(1)
x1 <- runif(100, 0, 1)
x2 <- sample(1:10, 100, TRUE)/10
y <- 1 + 2 * x1 + 3 * x2 + rnorm(100)
m.int2 <- lm(y ~ x1 + x2);summary(m.int2)
library(rsm)
persp(m.int2, x1 ~ x2, zlab = "y",col = rainbow(50), contours = "colors",
theta = 35, phi = 15,ticktype="simple")
icecream <- data.frame(
temp=c(11.9, 14.2, 15.2, 16.4, 17.2, 18.1,
18.5, 19.4, 22.1, 22.6, 23.4, 25.1),
units=c(185L, 215L, 332L, 325L, 408L, 421L,
406L, 412L, 522L, 445L, 544L, 614L)
)
glmModelPlot <- function(x, y, xlim,ylim, meanPred,  LwPred, UpPred,
plotData, main=NULL){
## Based on code by Arthur Charpentier:
## http://freakonometrics.hypotheses.org/9593
par(mfrow=c(1,1))
n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("yellow", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="light blue", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("blue", alpha.f = 0.5))
}
}
xlim <- c(min(icecream$temp)*0.95, max(icecream$temp)*1.05)
ylim <- c(floor(min(icecream$units)*0.95),
ceiling(max(icecream$units)*1.05))
lin.mod <- glm(units ~ temp, data=icecream,
family=gaussian(link="identity"))
#par(mfrow=c(2,2))
#plot(lin.mod)
#title(outer=TRUE, line = -1,
#      main = list("Linear regression",
#                   cex=1.25,col="black", font=2))
meanPred <- predict(lin.mod, type="response")
sdgig <- sqrt(summary(lin.mod)$dispersion)
UpPred <- qnorm(.95, meanPred, sdgig)
LwPred <- qnorm(.05, meanPred, sdgig)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
stp <- 251
x = rep(icecream$temp[i], stp)
y = seq(ylim[1], ylim[2], length=stp)
z0 = rep(0, stp)
z = dnorm(y, meanPred[i], sdgig)
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Linear regression")
# testing model assumptions some simulated data
x <- runif(100, 0, 10)
y <- 1 + 2 * x + rnorm(100, 0, 1)
m <- lm(y ~ x)
par(mfrow = c(2, 2))
plot(m)
# some wrong model
y <- 1 + 2 * x + 1 * x^2 - 0.5 * x^3
m <- lm(y ~ x)
par(mfrow = c(2, 2))
plot(m)
library(ggplot2)
m <- lm(cty ~ displ + factor(cyl), mpg)
par(mfrow = c(2, 2))
plot(m)
icecream<-read.csv("C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\icecream.csv")
qplot(x = temp, y = units, data = icecream,xlab="Temperature (Celsius)",
ylab="ice-cream sold")
model1 <- glm(units ~ temp, data=icecream,
family=gaussian(link="identity"))
summary(model1)
interceptOnly <- glm(units ~ 1, data=icecream,
family=gaussian(link="identity"))
summary(interceptOnly)
model2 <- glm(units ~ temp, data=icecream,
family=poisson(link="log"))
model2 <- glm(units ~ temp, data=icecream,
family=poisson(link="log"))
summary(model2)
exp(4.543821 + 0.075595 * 0 )
exp(0.075595) - 1
Fish <- read.table("C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\Fish.txt",header = T)
head(Fish)
qplot(x = MeanDepth, y = TotAbund, data = Fish,xlab="Mean depth (km)",
ylab="Number of fish")
m1 <- glm(TotAbund~MeanDepth,data=Fish)
#Get residuals and fitted values
E0 <- resid(m1)
F0 <- fitted(m1)
par(mfrow = c(1,2), mar = c(5,5,3,2))
plot(x = F0,
y = E0,
xlab = "Fitted values",
ylab = "Residuals",
cex.lab = 1.5)
abline(h = 0, lty = 2)
plot(x = Fish$MeanDepth,
y = Fish$TotAbund,
xlab = "Mean Depth (km)",
ylab = "Total abundance",
cex.lab = 1.5,
pch = 16)
abline(m1, lwd = 5)
M0 <- lm(TotAbund~MeanDepth,data=Fish)
par(mfrow = c(1,1), mar = c(5,5,3,2))
plot(x = Fish$MeanDepth,
y = Fish$TotAbund,
xlab = "Mean Depth (km)",
ylab = "Total abundance",
cex.lab = 1.5,
pch = 1,
ylim = c(-300, 1200))
abline(M0, lwd = 5)
abline(h = 0, lty = 2)
#range(Fish$MeanDepth)
md <- seq(0.804, 4.865, length = 10)
Beta <- coef(M0)
for (i in 1:10){
mu <- Beta[1] + Beta[2] * md[i]
yi <- rnorm(100, mean = mu, sd = summary(M0)$sigma)
points(jitter(rep(md[i], 100)), jitter(yi), col = grey(0.5), pch = 16, cex = 1)
}
m1 <- glm(TotAbund~ MeanDepth, data= Fish, family = poisson)
summary(m1)
par(mar = c(5,5,2,2))
MyData <- data.frame(MeanDepth = seq(0.804, 4.865, length = 25))
P1 <- predict(m1, newdata = MyData, type = "response")
plot(x = Fish$MeanDepth,
y = Fish$TotAbund,
ylim = c(0,1300),
xlab = "Mean depth (km)",
ylab = "Total abundance values", cex.lab = 1.5)
lines(MyData$MeanDepth, P1, lwd = 3)
#range(Fish$MeanDepth)
par(mar = c(5,5,2,2))
MyData <- data.frame(MeanDepth = seq(0.804, 4.865, length = 25))
P1 <- predict(m1, newdata = MyData, type = "response")
plot(x = Fish$MeanDepth,
y = Fish$TotAbund,
ylim = c(0,1300),
xlab = "Mean depth (km)",
ylab = "Total abundance values", cex.lab = 1.5)
HL <- seq(.804, 4.865, length = 25)
Beta <- coef(m1)
for (i in 1:25){
mu <- exp(Beta[1] + Beta[2] * HL[i])
yi <- rpois(50, lambda= mu)
points(jitter(rep(HL[i], 50)),
jitter(yi), col = "red",
pch = 16, cex = 1)
}
lines(MyData$MeanDepth, P1, lwd = 3)
100* ((m1$null.deviance-m1$deviance) / m1$null.deviance)
E1<-resid(m1,type="pearson")
E1<-resid(m1,type="pearson")
F1<-fitted(m1)
eta<-predict(m1,type="link")
plot(x = F1,
y = E1,
xlab = "Fitted values",
ylab = "Pearson residuals",
cex.lab = 1.5)
abline(h=0, v = 0, lty = 2)
m1 <- glm(TotAbund~ MeanDepth, data= Fish, family = poisson)
deviance(m1) / df.residual(m1)
head(Fish)
Fish$fPeriod <- factor(Fish$Period)
m2 <- glm(TotAbund~ MeanDepth * fPeriod, data= Fish, family = poisson)
summary(m2)
Fish$LogSA <- log(Fish$SweptArea)
m3 <- glm(TotAbund~ MeanDepth * fPeriod +offset(LogSA), data= Fish, family = poisson)
summary(m3)
require(MASS)
m4 <- glm.nb(TotAbund~ MeanDepth * fPeriod + offset(LogSA), data= Fish)
summary(m4)
deviance(m4) / df.residual(m4)
drop1(m4,test="Chi")
require(MASS)
m5 <- glm.nb(TotAbund~ MeanDepth + fPeriod + offset(LogSA), data= Fish)
summary(m5)
#Model validation
E1 <- resid(m5, type = "pearson")
F1 <- fitted(m5)
eta <- predict(m5, type = "link")
par(mfrow = c(2,2), mar = c(5,5,2,2))
plot(x = F1,
y = E1,
xlab = "Fitted values",
ylab = "Pearson residuals",
cex.lab = 1.5)
abline(h = 0, v = 0, lty = 2)
plot(x = c(1:146),
y = cooks.distance(m5),
xlab = "index",
ylab = "cooks distance",
ylim=c(0:1),
cex.lab = 1.5)
plot(x = Fish$MeanDepth,
y = E1,
xlab = "Mean Depth (km)",
ylab = "Pearson residuals",
cex.lab = 1.5,
pch = 16)
abline(h=0, v = 0, lty = 2)
boxplot(E1 ~ Period,
ylab = "Pearson residuals",
data = Fish,
cex.lab = 1.5,
xlab = "Period")
abline(h = 0, v = 0, lty = 2)
mydata1<-data.frame(
MeanDepth=seq(from=0.804,to=4.865,
length=25),
fPeriod ="1",
LogSA = log(mean(Fish$SweptArea)))
mydata2<-data.frame(
MeanDepth=seq(from=0.804,to=4.865,
length=25),
fPeriod ="2",
LogSA = log(mean(Fish$SweptArea)))
P1 <- predict(m5,newdata=mydata1,type = "response")
P2 <- predict(m5,newdata=mydata2,type = "response")
plot(Fish$MeanDepth,Fish$TotAbund,
xlab = "mean depth (km)",
ylab = "total abundance values")
lines(mydata1$MeanDepth,P1,lwd=3,col="red")
lines(mydata2$MeanDepth,P2,lwd=3)
legend(4,1000, legend=c("Period 1", "Period 2"),
col=c("red", "black"), lty=1, cex=0.8)
Bees <- read.table("C:\\Users\\akane\\Desktop\\Science\\Teaching\\BL6024_UCC_2017\\Lecture 06\\assets\\img\\WBees.txt",header=T)
head(Bees)
par(mfrow = c(1,2))
#Plot the data and add a linear regression line
#Figure 1.17
plot(x = Bees$CellSize,
y = Bees$Parasites,
xlab = "Cell size",
ylab = "Absence or presence of parasites")
M0 <- lm(Parasites ~ CellSize,
data = Bees)
abline(M0, lwd = 3)
#Boxplot of cell size conditional on absence/presence of parasites
boxplot(CellSize ~ Parasites,
data = Bees)
require(ggplot2)
log_odds = seq(from = -5, to = 5, by = 0.25)
odds = exp(log_odds)
# use 'plogis' function to calculate exp(x)/(1 + exp(x))
p = plogis(log_odds)
# use odds/(1+odds) to calculate p a different way
p2 = odds/(1 + odds)
# store probability of failure (1-p)
q = 1 - p
# store log_odds and y in data frame for use with ggplot
d = data.frame(log_odds, odds, p, p2, q)
ggplot(d, aes(x = log_odds, y = p)) +
geom_line() +
geom_hline(aes(yintercept = 0.5),
colour = "gray",
linetype = "dashed") +
geom_vline(aes(xintercept = 0.0),
colour = "gray",
linetype = "dashed") +
scale_x_continuous(breaks = seq(-5, 5, by = 1)) +
labs(title = "probability versus log-odds")
B1<-glm(Parasites~CellSize, family = binomial,data=Bees)
summary(B1)
# odds scale
-11.245+22.175*0.5
# probability scale
exp(-11.245+22.175*0.5) / (1 + exp (-11.245+22.175*0.5))
mydata<-data.frame(CellSize=seq(0.35,0.69,length=50))
pred <- predict(B1,newdata=mydata,type="response")
plot(x=Bees$CellSize,y=Bees$Parasites,xlab="cell size", ylab="probability of parasites")
lines(mydata$CellSize,pred)
